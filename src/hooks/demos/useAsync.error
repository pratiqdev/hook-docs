// @ts-nocheck
import React, { useState } from 'react'
import Layout from '../components/DemoLayout'
import Methods from '../components/Methods'
import Method from '../components/Method'
import MethodInput from '../components/MethodInput'
import { useAsync } from '@pratiq/hooks'


const local_useAsync = (callback: any, dependencies: any[] = []) => {
    const [loading, setLoading] = React.useState(false)
    const [error, setError] = React.useState<any>('err')
    const [value, setValue] = React.useState<any>('val')

    // React.useEffect(() => {

        setLoading(true)
        setError('err')
        setValue('val')
        callback()
            .then(setValue)
            .catch(setError)
            .finally(()=>setLoading(false))

        // eslint-disable-next-line
    // }, [...dependencies, callback])

    return {value, loading, error}
}

const promised = (a,b) => {
    return new Promise((res, rej)=>{
        setTimeout(()=>{
            if(Math.random() >=5){
                res(a + b)
            }else{
                rej('failed...')
            }
        }, 500 + Math.random() * 1000)
    })
}


const demoComponent = (props:any) => {
    // const [deps, setDeps] = useState<any>('abc')


    const {value, loading, error} = local_useAsync(() => promised(2,3))


    return(
        <Layout>
            <pre id='demo-display' >{JSON.stringify({ value:value.toString(), loading:loading.toString(), error: error.toString()})}</pre>


            <Methods title='set' desc='Set the state to a new array' >
                <Method id='set-1' pre='set([1,2,3])' func={() => methods.set([1,2,3])}  />
                <Method id='set-2' pre="set(['one','two','three'])" func={() => methods.set(['one','two','three'])}  />
                <Method id='set-3' pre='set([{text:"Hello"},{text:"World"}])' func={() => methods.set([{text:"Hello"},{text:"World"}])}  />
               
            </Methods>

            <Methods title='unshift' desc='Adds an element(s) to the beginning of the array and returns new length' >
                <Method hidden id='unshift-x1' func={() => methods.unshift(1)}  />
            </Methods>


        </Layout>
    )
}

export default demoComponent